{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","setState","stop","this","fetch","then","response","json","data","catch","err","console","log","_rendeMovies","movie","src_Movie","title_english","medium_cover_image","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAoCA,SAASA,EAATC,GAAoC,IAAdC,EAAcD,EAAdC,OAAQC,EAAMF,EAANE,IAC7B,OACCC,EAAAC,EAAAC,cAAA,OAAKC,IAAOL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAItD,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACpB,OACCR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,EAAhC,KAoBaC,MAvDf,SAAAC,GAAkD,IAAlCN,EAAkCM,EAAlCN,MAAON,EAA2BY,EAA3BZ,OAAQa,EAAmBD,EAAnBC,OAAQC,EAAWF,EAAXE,SACtC,OACCZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACdL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACdL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAUA,EAAQC,IAAKK,KAErCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACdL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbM,EAAOE,IAAI,SAACL,EAAMM,GAAP,OACXd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAQA,EAAOO,IAAKD,OAGlCd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACdL,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACCgB,KAAML,EACNM,QAAQ,IACRC,SAAS,OACTC,WAAS,EACTC,QAAQ,gBC0BCC,6MA7CbC,MAAQ,KAMRC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAA1B,EAAA2B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACSC,EAAKC,WADd,OACNP,EADMG,EAAAK,KAEZF,EAAKG,SAAS,CACbT,WAHW,wBAAAG,EAAAO,SAAAX,EAAAY,WAObJ,SAAW,WACV,OAAOK,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKhB,SACvBiB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAG3BG,aAAe,WAWd,OAVef,EAAKT,MAAMG,OAAOb,IAAI,SAACmC,GAErC,OADAH,QAAQC,IAAIE,GACLhD,EAAAC,EAAAC,cAAC+C,EAAD,CACP7C,MAAO4C,EAAME,cACbpD,OAAQkD,EAAMG,mBACdxC,OAAQqC,EAAMrC,OACdC,SAAUoC,EAAMpC,SAChBG,IAAKiC,EAAMI,2FAzBZf,KAAKb,8CA+BG,IACAE,EAAWW,KAAKd,MAAhBG,OAEP,OACE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAWqB,EAAS,MAAQ,gBAChCW,KAAKd,MAAMG,OAASW,KAAKU,eAAiB,kBAzC/BM,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.ee14dc72.chunk.js","sourcesContent":["/* Movie Component */\r\n// Add component -> render -> return -> export\r\n// props => 부모컴포넌트가 자식컴포넌트한테 data를 전달하는 것\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css';\r\n\r\nfunction Movie({title, poster, genres, synopsis}) {\r\n\treturn (\r\n\t\t<div className=\"Movie\">\r\n\t\t\t<div className=\"Movie__Column\">\r\n\t\t\t\t<MoviePoster poster = {poster} alt={title}/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"Movie__Column\">\r\n\t\t\t\t<h1>{title}</h1>\r\n\t\t\t\t<div className=\"Movie__Genres\">\r\n\t\t\t\t\t{genres.map((genre,index) => \r\n\t\t\t\t\t\t<MovieGenre genre= {genre} key={index} />\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"Movie__Synopsis\">\r\n\t\t\t\t\t<LinesEllipsis\r\n\t\t\t\t\t\ttext={synopsis}\r\n\t\t\t\t\t\tmaxLine='3'\r\n\t\t\t\t\t\tellipsis=' ...'\r\n\t\t\t\t\t\ttrimRight\r\n\t\t\t\t\t\tbasedOn='letters'\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nfunction MoviePoster({poster, alt}) {\r\n\treturn (\r\n\t\t<img src = {poster} alt={alt} title={alt} className=\"Movie__Poster\" />\r\n\t)\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n\treturn(\r\n\t\t<span className=\"Movie__Genre\">{genre} </span>\r\n\t)\r\n}\r\n\r\nMovie.propTypes = {\r\n\ttitle: PropTypes.string.isRequired,\r\n\tposter: PropTypes.string.isRequired,\r\n\tgenres: PropTypes.string.isRequired,\r\n\tsynopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n\tposter: PropTypes.string.isRequired,\r\n\talt: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n\tgenre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","/* App Component */\n// props => 부모컴포넌트가 자식컴포넌트한테 data를 전달하는 것\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie'\n\nclass App extends Component {\n\n  state = {}\n\n  componentDidMount() {\n  \tthis._getMovies();\n  }\n\n  _getMovies = async () => {         \n  \tconst movies = await this._callApi()    \n  \tthis.setState({\t\t\t\t\t\t\t\n  \t\tmovies    // movies : movies\n  \t})\n  }                                        \n\n  _callApi = () => {\n  \treturn fetch(\"https://yts.am/api/v2/list_movies.json?sort_by=download_count\")\n  \t.then(response => response.json())\n  \t.then(json => json.data.movies)\n  \t.catch(err => console.log(err))\n  }\n\n  _rendeMovies = () => {\n  \tconst movies = this.state.movies.map((movie) => {\n  \t\tconsole.log(movie)\n  \t\treturn <Movie \n  \t\ttitle={movie.title_english} \n  \t\tposter={movie.medium_cover_image} \n  \t\tgenres={movie.genres}\n  \t\tsynopsis={movie.synopsis}\n  \t\tkey={movie.id}\n  \t\t/>\n     })\n  \treturn movies\n  }\n\n  render() {\n  \tconst { movies } = this.state;\n\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n     \t{this.state.movies ? this._rendeMovies() : 'Loading' }\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* 강의 React JS로 웹 서비스 만들기! 2-3 */\n\nimport React from 'react'\nimport ReactDOM from 'react-dom';   \t\t\t\t\t\t\t\t\t// Document Object Model\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\t\t\t\t// App.js - index.html(element ID : root) 매핑\nserviceWorker.unregister();\n\n\n// react는 라이브러리, reactDOM은 라이브러리를 WEB으로 출력해줌\n\n// ReactDOM(WEB)\n// ReactNative(MOBILE)\n\n\n"],"sourceRoot":""}